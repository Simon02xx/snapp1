import pytz
import logging
import time
import threading
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from web3 import Web3

# Set up logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)

# User input for configuration
TELEGRAM_BOT_TOKEN = input("Enter your Telegram Bot Token: ")
INFURA_URL_SOL = "https://solana-mainnet.infura.io/v3/" + input("Enter your Infura Key for Solana: ")
PRIVATE_KEY = input("Enter your wallet private key: ")
WALLET_ADDRESS = input("Enter your wallet address: ")

# Customizable Filters
MARKET_CAP_RANGE = (10_000, 5_000_000)  # Min: $10,000, Max: $5,000,000
MIN_HOLDERS = 12                       # Minimum 12 holders
MIN_LIQUIDITY = 50.0                   # Minimum 50 SOL liquidity
MAX_GAS_PRICE = 100                    # Maximum 100 Gwei gas price
STOP_LOSS_PERCENT = 0.30               # Fixed stop-loss at 30%
MIN_LIQUIDITY_USD = 30_000             # Minimum $30,000 liquidity if locked

# Solana Chain Configuration
SUPPORTED_CHAIN = {
    "SOL": {
        "rpc": INFURA_URL_SOL,
        "router": "https://quote-api.jup.ag/v4/quote",
    }
}

# Function to get the best swap price from Jupiter
def get_best_swap(token_address, amount):
    try:
        url = f"{SUPPORTED_CHAIN['SOL']['router']}?inputMint=SOL&outputMint={token_address}&amount={amount}"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"Error fetching swap price: {e}")
        return None

# Function to check liquidity lock and value using Solanascan
def check_liquidity_status(token_address):
    """
    Checks if liquidity is locked and if the locked amount is greater than $30,000.
    Assumes Solanascan API provides 'liquidity_locked' (bool) and 'liquidity_usd' (float).
    """
    url = f"https://api.solanascan.io/v1/token/{token_address}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()

        liquidity_locked = data.get("liquidity_locked", False)
        liquidity_usd = data.get("liquidity_usd", 0.0)  # Value in USD
        
        logging.info(f"Liquidity lock for {token_address}: {liquidity_locked}, Liquidity USD: ${liquidity_usd}")

        # Only return True if liquidity is locked and above the minimum threshold
        return liquidity_locked and liquidity_usd >= MIN_LIQUIDITY_USD
    except requests.RequestException as e:
        logging.error(f"Error checking liquidity on Solanascan for {token_address}: {e}")
        return False  # Assume liquidity is NOT locked if the API fails

# Check token filtering criteria
def check_token_criteria(token_info):
    return (
        MARKET_CAP_RANGE[0] <= token_info.get("market_cap", 0) <= MARKET_CAP_RANGE[1]
        and token_info.get("holders", 0) >= MIN_HOLDERS
        and token_info.get("liquidity", 0) >= MIN_LIQUIDITY
        and token_info.get("gas_price", 0) <= MAX_GAS_PRICE
        and check_liquidity_status(token_info.get("token_address"))  # Check liquidity lock & value
    )

# Snipe token using Jupiter
def snipe(token_address):
    logging.info(f"🔍 Evaluating {token_address} for sniping...")

    # Simulated API response for token info.
    # In production, fetch real token data from your chosen source.
    token_info = {
        "market_cap": 5000000,
        "holders": 1500,
        "liquidity": 200.5,
        "gas_price": 10,
        "token_address": token_address,
    }

    if not check_token_criteria(token_info):
        logging.info("🚨 Token does not meet criteria (liquidity lock or min value failed). Skipping.")
        return

    best_quote = get_best_swap(token_address, 100000000)  # Example: 0.1 SOL (amount in smallest unit)
    if not best_quote:
        logging.info("❌ Failed to get best price from Jupiter API.")
        return

    logging.info(f"🚀 Sniping {token_address} at best price!")
    threading.Thread(target=monitor_price, args=(token_address,), daemon=True).start()

# Monitor price movements
def monitor_price(token_address):
    entry_price = 1  # Simulated entry price; replace with real data as needed.
    while True:
        try:
            # TODO: Replace with real price checking logic.
            current_price = 2  # Simulated current price
            if current_price >= 2 * entry_price:
                auto_sell(token_address, portion=0.5)
            if current_price >= 10 * entry_price:
                auto_sell(token_address, portion=1.0)
            if current_price <= entry_price * (1 - STOP_LOSS_PERCENT):
                logging.info("📉 Stop-loss triggered! Selling all holdings.")
                auto_sell(token_address, portion=1.0)
        except Exception as e:
            logging.error(f"Error in price monitoring for {token_address}: {e}")
        time.sleep(10)

# Auto-sell function using Jupiter
def auto_sell(token_address, portion=1.0):
    logging.info(f"💰 Selling {portion * 100}% of {token_address} via Jupiter.")
    best_quote = get_best_swap(token_address, 100000000)  # Example: 0.1 SOL
    if not best_quote:
        logging.info("❌ Failed to get best price from Jupiter API.")
        return
    logging.info(f"✅ Sold {portion * 100}% at best rate.")

# Monitor new pairs and auto-snipe
def monitor_new_pairs():
    while True:
        try:
            new_tokens = ["0xNewTokenAddress1", "0xNewTokenAddress2"]  # Simulated new token addresses
            for token_address in new_tokens:
                logging.info(f"🆕 New token detected: {token_address}")
                snipe(token_address)
        except Exception as e:
            logging.error(f"Error monitoring new pairs: {e}")
        time.sleep(5)

# Telegram Bot Commands
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("🤖 Catherine (Sniper Bot) is running! Ready to snipe new tokens.")

async def check_balance(update: Update, context: CallbackContext):
    await update.message.reply_text("🔍 Checking wallet balance...")

async def error_handler(update: object, context: CallbackContext):
    logging.error(f"Exception: {context.error}")

# Start the Telegram bot and monitoring in parallel
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.bot_data["timezone"] = pytz.utc  # Manually set timezone

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", check_balance))
    app.add_error_handler(error_handler)

    logging.info("🚀 Catherine (Sniper Bot) is LIVE!")

    # Run token monitoring in a separate thread
    threading.Thread(target=monitor_new_pairs, daemon=True).start()

    # Start Telegram polling
    app.run_polling()

if __name__ == "__main__":
    main()
